/**
 *  A8: Educational-App
 *
 *  @brief Backend for the final "level" of our educational app that tests the user's knowledge
 *
 *  Test mode gives users "client orders" that they must fill, building a custom
 *  rocket with the shape, color, sound, and size specified by the client. Test
 *  mode limits the user from seeing what color/sound each material corresponds
 *  to when building the firework. This class produces the randomized orders that
 *  the user must fill and then validates the user's attempt to fill them.
 *
 *  By Anna Madsen, Carlos Gonzalez, Carter Edginton, Rachel Nguyen, and Zander Ruiz
 *  for CS 3505 in Spring 2023
*/
#ifndef TESTMODEMODEL_H
#define TESTMODEMODEL_H

#include <QObject>
#include "FireworkProperties.h"

class TestModeModel : public QObject
{
    Q_OBJECT
public:
    TestModeModel();

    /**
     * @brief generateFireworkSpecifications generates a random set of firework specifications and stores them
     *
     * The specifications generated will be emitted in the specificationsGenerated signal so that they can be
     * displayed to the user. The specifications will also be stored in this class to be compared with the user's
     * choices later.
     */
    void generateFireworkSpecifications();
public slots:
    /**
     * @brief checkUserSelections checks whether the user selected the right materials to make a firework
     *
     * The given FireworkProperties object is checked against the most recent specifications generated by this class.
     * If the FireworkProperties objects match according to their operator== overrides, then userWinOrLoss(true) is emitted
     * to show that the user succeeded in matching specifications. Otherwise, userWinOrLoss(false) is emittedto indicate
     * that the user made a mistake. A count is kept of the number of wins that the user has had.
     *
     * @param userSelections
     */
    void checkUserSelections(FireworkProperties& userSelections);

    /**
     * @brief resetWinStreak resets the count of successful order fulfillments for the current session.
     */
    void resetWinCount();

signals:
    /**
     * @brief specificationsGenerated tells the view what random firework specifications to show to the user
     * @param shapeSpec the shape of the firework that the user should build
     * @param colorSpec the color of the firework that the user should build
     * @param soundSpec the sound of the firework that the user should build
     * @param shellDiameterSpec the size of the firework that the user should build
     */
    void specificationsGenerated(QString shapeSpec, QString colorSpec, QString soundSpec, int shellDiameterSpec);

    /**
     * @brief userWinOrLoss this signal is emitted whenever a check is done on a user's attempt to match a firework specification
     *
     * The win parameter from this signal tells whether the user fulfilled the specification accurately.
     *
     * @param win whether the current attempt from the user should be counted as a win or loss.
     */
    void userWinOrLoss(bool win);

    /**
     * @brief winCountChanged notifies the view that the user's number of wins has changed so that the new win count can be displayed
     * @param newWinCount the new number of wins the user has
     */
    void winCountChanged(int newWinCount);

private:
    FireworkProperties fireworkSpec;

    QString shapeOptions[4] = {"Circle", "Heart", "Smile", "Star"};
    QString colorOptions[8] = {"red", "orange", "yellow", "green", "blue", "purple", "pink", "white"};
    QString soundOptions[3] = {"Crackle", "Bang", "Whistle"};
    int shellDiameterMax = 13;
    int shellDiameterMin = 6;

    int winCount = 0;
};

#endif // TESTMODEMODEL_H
